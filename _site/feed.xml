<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-27T22:12:43+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Software Engineer Living in Tokyo, Japan.</title><subtitle>üë©üèª K: born in Singapore üá∏üá¨, relocated to Tokyo, Japan üáØüáµ in late 2019. &lt;br&gt;  semi-junior software engineer.  &lt;br&gt; &lt;br&gt; üë®üèΩ M: born in Philippines üáµüá≠,  relocated to Tokyo, Japan üáØüáµ in late 2019. &lt;br&gt; not semi-junior software engineer. &lt;br&gt;</subtitle><entry><title type="html">Effective C++ Series Item 6</title><link href="http://localhost:4000/2020-04-27/Effective-C++-Series-Item-6" rel="alternate" type="text/html" title="Effective C++ Series Item 6" /><published>2020-04-27T21:21:00+09:00</published><updated>2020-04-27T21:21:00+09:00</updated><id>http://localhost:4000/2020-04-27/Effective%20C++%20Series%20Item%206</id><content type="html" xml:base="http://localhost:4000/2020-04-27/Effective-C++-Series-Item-6">&lt;p&gt;Chapter 1, Item 6: Explicitly Disallow the User of Compiler-Generated Functions you do not want.
From the previous chapter, you‚Äôll know that C++ auto generates constructors when you don‚Äôt declare it.&lt;/p&gt;

&lt;p&gt;However, what happens if you want to create unique objects? Read on to find out more.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeForSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HomeForSale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HomeForSale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//attempting to copy h2 into h1&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;HomeForSale&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//attempting to copy h1 to h3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above copy code dosen‚Äôt make sense right? Because 2 houses shouldn‚Äôt be exactly the same. 
How can we prevent that? In normal circumstances, if we do not want something, we simply do not code it out. However, as mention in &lt;a href=&quot;https://livinginjapan.github.io/2020-03-28/Effective-C++-Series(ii)&quot;&gt;earlier blogpost&lt;/a&gt;, if you don‚Äôt declare, and somebody tries to call, the compiler will declare it for you.&lt;/p&gt;

&lt;p&gt;How can we prevent other classes from calling a copy constructor / assignment operator?&lt;br /&gt;
Answer: &lt;code class=&quot;highlighter-rouge&quot;&gt;just declare them private.&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;declaring prevent compiler generating its own function&lt;/li&gt;
  &lt;li&gt;setting it private keep people from calling it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It‚Äôs not entirely foolproof though. A member / friend function can still call a private function:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//calling foo()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//calling foo again noooo!!!!!!!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the trick is to not define the function so that they‚Äôll get error at link-time. This is a well established trick where lots of C++ iostreams are using it like this.&lt;/p&gt;

&lt;p&gt;So the final code should look like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeForSale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HomeForSale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomeForSale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//declarations only. &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HomeForSale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomeForSale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: common convention is that you can omit function parameters if you are not using it. 
To optimise it by failing at compile time, declare the copy constructor and copy assignment operator private not in HomeForSale class but base class.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Uncopyable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;protected:&lt;/span&gt;                                   &lt;span class=&quot;c1&quot;&gt;// allow construction&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;// and destruction of&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;// derived objects...&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// ...but prevent copying&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uncopyable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and now HomeForSale can inherit from Uncopyable&lt;/p&gt;

&lt;p&gt;```
class HomeForSale : private Uncopyable {
  ‚Ä¶.
};&lt;/p&gt;

&lt;p&gt;when compiler try to generate a copy constructor / copy assignment operator, if anybody tries to call it, it will try to call the base class and it will fail because it is private.&lt;/p&gt;

&lt;p&gt;C++ is so.. smart  yet frustrating at the same time.&lt;/p&gt;

&lt;p&gt;Ok thats all for today‚Äôs learning!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;K.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Chapter 1, Item 6: Explicitly Disallow the User of Compiler-Generated Functions you do not want. From the previous chapter, you‚Äôll know that C++ auto generates constructors when you don‚Äôt declare it. However, what happens if you want to create unique objects? Read on to find out more.</summary></entry><entry><title type="html">Welcome M.</title><link href="http://localhost:4000/2020-03-31/Welcome-M." rel="alternate" type="text/html" title="Welcome M." /><published>2020-03-31T22:14:00+09:00</published><updated>2020-03-31T22:14:00+09:00</updated><id>http://localhost:4000/2020-03-31/Welcome%20M.</id><content type="html" xml:base="http://localhost:4000/2020-03-31/Welcome-M.">&lt;p&gt;Hey all!&lt;/p&gt;

&lt;p&gt;Let me introduce a new writer to this blog, M. He is a software engineer working in one of the FAANG company. 
He is also the fierce coach I mentioned in &lt;a href=&quot;https://livinginjapan.github.io/2019-12-31/Bye-2019&quot;&gt;previous blogpost&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Look forward to his first post!&lt;/p&gt;

&lt;p&gt;Signing off, &lt;br /&gt;
K.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hey all! Let me introduce a new writer to this blog, M. He is a software engineer working in one of the FAANG company. He is also the fierce coach I mentioned in previous blogpost. Look forward to his first post! Signing off, K.</summary></entry><entry><title type="html">Effective C++ Series(ii)</title><link href="http://localhost:4000/2020-03-28/Effective-C++-Series(ii)" rel="alternate" type="text/html" title="Effective C++ Series(ii)" /><published>2020-03-28T22:38:00+09:00</published><updated>2020-03-28T22:38:00+09:00</updated><id>http://localhost:4000/2020-03-28/Effective%20C++%20Series(ii)</id><content type="html" xml:base="http://localhost:4000/2020-03-28/Effective-C++-Series(ii)">&lt;p&gt;Chapter 1, Item 5: &lt;strong&gt;Know what functions C++ silently write and calls.&lt;/strong&gt; &lt;br /&gt;
First and foremost, something that confuses the hell out of beginners / me are the C++ constructors. There are 3 different kind of constructors in C++.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;default constructor&lt;/li&gt;
  &lt;li&gt;copy constructor&lt;/li&gt;
  &lt;li&gt;copy assignment operator.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what are the differences between those 3? 
&lt;!--more--&gt;
Writing a simple C++ Program can tell you so:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default constructor&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;copy constructor&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;assignment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//default constructor &lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//copy constructor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//copy constructor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//default constructor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//assignment constructor &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, if we were to declare an empty class, i.e. 
class A {};&lt;/p&gt;

&lt;p&gt;It is essetiantally the same as follows:&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is what C++ compiler will generate for you. Also, it is only generated when needed (when you invoke them). 
However, as long as you declare a &lt;em&gt;type&lt;/em&gt; of constructor, compilers won‚Äôt generate it anymore. For example:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectVal_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;objectVal_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default constructor&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// A&amp;lt;int&amp;gt; a; // this will now fail!	&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mike&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//calls default constructor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//compiler generates this copy constructor &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we tried copying from object &lt;code class=&quot;highlighter-rouge&quot;&gt;a to b&lt;/code&gt; this can happen even if we did not specify the copy constructor as compiler will generate one for you.
since we tried copying a.name_ to b.name_, it will use the string copy constructor, and we specified int on objectVal_ so it will initialize by copying bits to b.objectVal_.&lt;/p&gt;

&lt;p&gt;That‚Äôs all for today chapter in learning what the compiler generates for you.&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;K.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Chapter 1, Item 5: Know what functions C++ silently write and calls. First and foremost, something that confuses the hell out of beginners / me are the C++ constructors. There are 3 different kind of constructors in C++. default constructor copy constructor copy assignment operator. So what are the differences between those 3?</summary></entry><entry><title type="html">Effective C++ Series</title><link href="http://localhost:4000/2020-03-14/Effective-C++-Series" rel="alternate" type="text/html" title="Effective C++ Series" /><published>2020-03-14T22:38:00+09:00</published><updated>2020-03-14T22:38:00+09:00</updated><id>http://localhost:4000/2020-03-14/Effective%20C++%20Series</id><content type="html" xml:base="http://localhost:4000/2020-03-14/Effective-C++-Series">&lt;p&gt;Chapter 1, Item 4: &lt;strong&gt;Make sure that objects are initialised before used.&lt;/strong&gt; &lt;br /&gt;
Before I actually started reading this book / writing ANY C++ code, I created a mini project (something to keep track of my finance) to get myself started with C++. 
The closest language I know that is similar to C++ was Java. Naturally, I coded the mini project in a very Java style.  While reading the book / working / finding out more information on C++, I looked back at my project and realised I made the most fundemental mistake in C++.  Initialization and assignments are two &lt;strong&gt;VERY&lt;/strong&gt; different things. (duh!)
&lt;!--more--&gt;
 &lt;br /&gt;&lt;br /&gt;
As the title says, in C++, always remember to initialize your code. In C++, initialization isn‚Äôt guaranteed. If the programs reads a variable that is not initialised, it may stop the entire program or run into undefined behaviour.  There are some rules to describe whether initialization of an object is guranteed or not, it is somewhat complicated, but the bottom line is:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If you are in the C part of C++, initialization would incur a runtime cost, and it is &lt;strong&gt;NOT&lt;/strong&gt; guranteed to take place.&lt;/li&gt;
  &lt;li&gt;If you are in non C parts, it is not necessarily guranteed to take place, but initializing a vector from the standard library is guranteed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See? It can get so messed up. So the best idea is to &lt;strong&gt;ALWAYS&lt;/strong&gt; initialize your objects / variables.&lt;/p&gt;

&lt;p&gt;Here comes the ‚Äúinteresting‚Äù part (at least for me). 
So in java, when we initialize an object, what we usually do is this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// instance variable&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;c1&quot;&gt;//constructor&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mike&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Creating account objects &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above code shows you could create a constructor with &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; as a reference to the current object and now ‚Äòacc‚Äô object has got an instance variable initialized to ‚ÄúMike‚Äù.
So‚Ä¶ I was being ‚Äúsmart‚Äù and did this to my mini project in C++ too! Following example is a short snippet:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gregorian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Very‚Ä¶embarrassing. Firstly, &lt;code class=&quot;highlighter-rouge&quot;&gt;this-&amp;gt;&lt;/code&gt; is actually implicitly called in C++ when you try to assign &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;momthExpenses&lt;/code&gt;.  Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; can be omitted actually. 
Next, and most importantly, did you know:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this-&amp;gt;date = date; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;IS ACTUALLY AN &lt;strong&gt;ASSIGNMENT&lt;/strong&gt; AND NOT AN &lt;strong&gt;INITIALIZATION&lt;/strong&gt;? Yup, rookie mistake. 
From the book I quote, &lt;br /&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;The rules of C++ stipulate that data members of an object are initialized before the body of a constructor is entered.&lt;/code&gt; Hence, date or monthExpenses are actually assigned. No what you intended right? This means that, initialization already took place?
Thats right! Before entering the constructor body, initialization ALREADY took place. Hence, the most recommended &amp;amp; better way to write is as follows:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gregorian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//member initialization list &lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//this is the constructor body which is now empty.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That embarrassing code up there (lets call it Embarrassment 1.0), and this one here (still embarrassing. to be improved Embarrassement 2.0) performs the objective - which is to set a value to date and name. However, Embarrassment 2.0 is better too in terms of performance. The reason is that Embarrassment 1.0 will have to first initialize date and name through a default constructor and then assign new values this means that the &lt;strong&gt;default constructor&lt;/strong&gt; work are all going to a waste. While Embarrassment 2.0 gets to avoid that and only initialized that data members which uses &lt;strong&gt;copy constructor&lt;/strong&gt;. This is as opposed to &lt;strong&gt;default constructor&lt;/strong&gt; and then a &lt;strong&gt;copy assignment operator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What about constructors with no parameters? Do we still initialise them? - Short answer is: yes it is recommended. &lt;br /&gt;
Long answer is: Compiler will help to call default constructor if you dont initialise them. But if you have a data member with a primitive type (i.e C-style type) like an &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;, and you forgotten to initialise it, you will go have to spend some good time debugging - which can be avoided if you just initailise it.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Initializing empty data members&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Das all folks! More Effective C++ Series to come!&lt;/p&gt;</content><author><name></name></author><summary type="html">Chapter 1, Item 4: Make sure that objects are initialised before used. Before I actually started reading this book / writing ANY C++ code, I created a mini project (something to keep track of my finance) to get myself started with C++. The closest language I know that is similar to C++ was Java. Naturally, I coded the mini project in a very Java style. While reading the book / working / finding out more information on C++, I looked back at my project and realised I made the most fundemental mistake in C++. Initialization and assignments are two VERY different things. (duh!)</summary></entry><entry><title type="html">Julie And Julia</title><link href="http://localhost:4000/2020-01-04/Julie-and-Julia" rel="alternate" type="text/html" title="Julie And Julia" /><published>2020-01-04T21:10:19+09:00</published><updated>2020-01-04T21:10:19+09:00</updated><id>http://localhost:4000/2020-01-04/Julie%20and%20Julia</id><content type="html" xml:base="http://localhost:4000/2020-01-04/Julie-and-Julia">&lt;p&gt;Happy New Year! Was watching Julie and Julia while on annual leave. It seems like a really good movie to watch for the brand new year. Julie was doing the same thing as me! Blogging about the things she like. I particularly like one quote from Julie. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I'll probably need a deadline, otherwise it'll be like everything else I do, I never finish.&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;- Julie Powell. &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Therefore this year, in order to resolve my new year resolution, I‚Äôll try to break them down into smaller steps with a &lt;code class=&quot;highlighter-rouge&quot;&gt;deadline&lt;/code&gt;. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;My new year resolutions usually ends up pretty well, except for the fitness / lose weight part. I always keep my new year resolutions short. Approximately 3 per year. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I will keep my new year resolutions for myself, but I‚Äôll share the plans here for self-improvement. &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt; Write down whatever you do not know. Walk through the list, make a deadline to learn it. &lt;/li&gt;
    &lt;li&gt; Read more. Reading is never wrong. &lt;/li&gt;
    &lt;li&gt; Stay excited. (like Julia going to her le cordon bleu classes) &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Back to work tomorrow. Lets do this!&lt;/p&gt;</content><author><name></name></author><summary type="html">Happy New Year! Was watching Julie and Julia while on annual leave. It seems like a really good movie to watch for the brand new year. Julie was doing the same thing as me! Blogging about the things she like. I particularly like one quote from Julie. I'll probably need a deadline, otherwise it'll be like everything else I do, I never finish. - Julie Powell. Therefore this year, in order to resolve my new year resolution, I‚Äôll try to break them down into smaller steps with a deadline.</summary></entry><entry><title type="html">Bye 2019</title><link href="http://localhost:4000/2019-12-31/Bye-2019" rel="alternate" type="text/html" title="Bye 2019" /><published>2019-12-31T12:49:19+09:00</published><updated>2019-12-31T12:49:19+09:00</updated><id>http://localhost:4000/2019-12-31/Bye%202019</id><content type="html" xml:base="http://localhost:4000/2019-12-31/Bye-2019">&lt;p&gt;This year was a &lt;em&gt;really, really,&lt;/em&gt; wild ride. So many changes took place. My own personal development, doing things that I never thought I would be able to (conquering interviews), and also, the physical change - living abroad. January, I started out really strong in exercising. I maintained running at least 4 times a week for a month, meal prepped my own lunch. However, this did not last long, as I started prepping my resume, sending them out and practice technical questions.  &lt;br /&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I sent out countless of resume to multiple companies, wrecked a few interviews, and got lucky with 2 companies. Will write a story on that in future. But the short version is, I leetcoded hard for 6 months. As evident from my github graph:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/github_contrib.png&quot; alt=&quot;My github contribution&quot; /&gt;
(you could tell when I got hired into my new company üòõ)&lt;/p&gt;

&lt;p&gt;I never thought I would be able to nail technical interviews,(i &lt;strong&gt; failed &lt;/strong&gt; my basic programming class in year 1 during uni despite studying hard) but I did. It was a combination of hard work, smart work, persistence, and luck. Weekends were mostly at home studying, and after work, I try to complete 1 leetcode question a day. It was soooo damn tough. Job hunting is tough. I often beat myself up during that past 5-6 months. Crying, thinking of giving up happens so frequently. All credits to my boyfriend, who is also my fierce coach - for prepping me and giving me all the support and guidance I needed.&lt;/p&gt;

&lt;p&gt;In the end, it was a sweet ending, and i‚Äôm thankful. I got an offer from a big company, overseas. They flew me in for an interview and I took an extended trip with my mum after the interview. Happiness. My first overseas interview took place. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Accepted the job offer, and got sent to training in New York. It was an incredible experience. I was flown business class, stayed in a good hotel, and had my expenses paid for. I met really fun loving people in my training class too. Everything was so so so surreal. The only downside was,the time difference and long distance relationship sucks. so much. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;After training, went back to Tokyo, stayed in an incredible service apartment temporarily while I did house hunting - which I didn‚Äôt expect it to be so damn tough too. Houses can be different from pictures, and most importantly, Tokyo housing market get snaps up really fast on the good properties. Whats left over are usually the bad apples. Ultimately, we settled in a smaller apartment that was within our budget, but at a convenient location. &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It was all fun and stuff, but of course, it is also so hard to just start out at a new job. I am under constant stress on learning and trying to give people good impression. Imposter syndrome definitely kicks in because everyone in the company is just so damn smart. There seems to be infinite amount of things to learn! &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is my ending of 2019. And now 2020 is here, I will have new set of goals,facing my existing challenges and embrace the upcoming ones. Bring it on! (It‚Äôs the new year new hope vibes again lol.)&lt;/p&gt;</content><author><name></name></author><summary type="html">This year was a really, really, wild ride. So many changes took place. My own personal development, doing things that I never thought I would be able to (conquering interviews), and also, the physical change - living abroad. January, I started out really strong in exercising. I maintained running at least 4 times a week for a month, meal prepped my own lunch. However, this did not last long, as I started prepping my resume, sending them out and practice technical questions.</summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/2019-12-31/Hello-World" rel="alternate" type="text/html" title="Hello World" /><published>2019-12-31T00:49:19+09:00</published><updated>2019-12-31T00:49:19+09:00</updated><id>http://localhost:4000/2019-12-31/Hello%20World</id><content type="html" xml:base="http://localhost:4000/2019-12-31/Hello-World">&lt;p&gt;Classic first post. Just a place to journal down my learnings and experiences. I was born and raised in Singapore throughout my entire life, this is my very first time leaving home to live in a foreign place. There were plenty of challenges I‚Äôve faced the past few months, and i‚Äôm sure there will be more in the upcoming year. Will be blogging here to share my experiences! You can use askfm to ask me a question :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Classic first post. Just a place to journal down my learnings and experiences. I was born and raised in Singapore throughout my entire life, this is my very first time leaving home to live in a foreign place. There were plenty of challenges I‚Äôve faced the past few months, and i‚Äôm sure there will be more in the upcoming year. Will be blogging here to share my experiences! You can use askfm to ask me a question :)</summary></entry></feed>